default:
  image: ${CI_REGISTRY_IMAGE}/dev:latest
  tags: [ncae-docker]

variables:
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}/ansible_collections/netcloud/ncae
  PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  CI_DEBUG_SERVICES: "true"

stages:
  - build
  - lint
  - test
  - release

devct-build:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/dev.dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/dev:latest"
      --cache=true
      --cache-copy-layers=true
      --skip-tls-verify-registry "${CI_REGISTRY}"

galaxy-build:
  stage: build
  needs:
    - devct-build
  script:
    - echo "GALAXY_VERSION=$(grep version galaxy.yml | cut -d' ' -sf 2)" >>build.env
    - ansible-galaxy collection build
  artifacts:
    when: on_success
    expire_in: 7 days
    paths:
      - netcloud-ncae-*.tar.gz
    reports:
      dotenv: build.env

docs-build:
  stage: build
  needs:
    - devct-build
  variables:
    ANSIBLE_COLLECTIONS_PATHS: "${CI_BUILDS_DIR}/ansible_collections/"
  script:
    - mkdir -p docs/output
    - antsibull-docs sphinx-init --use-current --dest-dir docs/output netcloud.ncae
    - cd docs/output/
    - pip install -r requirements.txt
    - ./build.sh
  artifacts:
    when: on_success
    expire_in: 12 hours
    paths:
      - docs/output/build/html

python-flake8:
  stage: lint
  needs:
    - devct-build
  script:
    - flake8 --output-file flake8.report.txt
  after_script:
    - flake8_junit flake8.report.txt flake8.report.xml
  artifacts:
    when: always
    paths:
      - flake8.report.xml
    reports:
      junit: flake8.report.xml

python-black:
  stage: lint
  needs:
    - devct-build
  script:
    - black . --check --verbose 2> >(tee black.report.txt >&2)
  after_script:
    - black-junit <black.report.txt >black.report.xml
  artifacts:
    when: always
    paths:
      - black.report.xml
    reports:
      junit: black.report.xml

ansible-lint:
  stage: lint
  needs:
    - devct-build
  script:
    - ansible-lint -p --nocolor | tee ansible-lint.report.txt
    - ansible-lint-junit -o ansible-lint.report.xml <ansible-lint.report.txt
  artifacts:
    when: always
    paths:
      - ansible-lint.report.xml
    reports:
      junit: ansible-lint.report.xml

ansible-test-sanity:
  stage: test
  needs:
    - devct-build
    - ansible-lint
  script:
    - ansible-test sanity --venv --junit
  artifacts:
    when: always
    paths:
      - tests/output/junit/*.xml
    reports:
      junit: tests/output/junit/*.xml

ansible-test-unit:
  stage: test
  needs:
    - devct-build
    - ansible-lint
  script:
    - ansible-test units --venv

ansible-test-integration:
  stage: test
  needs:
    - devct-build
    - ansible-lint
  script:
    - envsubst >tests/integration/integration_config.yml <tests/integration/integration_config.yml.template
    - ansible-test integration --venv
  variables:
    FF_NETWORK_PER_BUILD: 1
    NCAE_BASE_URL: http://ncae-core:8000
    NCAE_USERNAME: admin
    NCAE_PASSWORD: integration
  services:
    - name: docker.io/library/postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: ncae
        POSTGRES_USER: integration
        POSTGRES_PASSWORD: testing

    - name: harbor-01.netcloud.lab/ncae/ncae-core:R1.2-13
      alias: ncae-core
      entrypoint: ["/bin/bash", "-c"]
      command:
        - |
          python3 manage.py migrate
          python3 manage.py createsuperuser --noinput
          tools/run_prod.sh
      variables:
        DJANGO_ALLOWED_HOSTS: "*"
        DJANGO_SECRET_KEY: ncae-integration-testing
        DJANGO_DEBUG: "true"
        DJANGO_SUPERUSER_USERNAME: admin
        DJANGO_SUPERUSER_PASSWORD: integration
        DJANGO_SUPERUSER_EMAIL: admin@localhost
        BACKEND_HOST: ncae-core
        BACKEND_PORT: 8000
        DB_IP: postgres
        DB_NAME: ncae
        DB_USER: integration
        DB_PW: testing

docs-release:
  stage: release
  dependencies:
    - docs-build
  variables:
    CACHE_DIR: /tmp/npm-cache
  script:
    # Spawn SSH agent and load private key
    - eval $(ssh-agent -s)
    - chmod 400 "${GH_PAGES_PRIVATE_KEY}"
    - ssh-add "${GH_PAGES_PRIVATE_KEY}"

    # Manage known SSH host keys
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - cp "${GH_PAGES_KNOWN_HOSTS}" ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Disable Jekyll on GitHub pages to avoid issues with underscore paths
    - touch docs/output/build/html/.nojekyll

    # Publish built Sphinx docs to GitHub Pages
    - npx gh-pages
      --repo git@github.com:netcloud/ncae-ansible-collection.git
      --branch gh-pages
      --dotfiles
      --user "Netcloud AG <info@netcloud.ch>"
      --message "Automated updates from GitLab CI"
      --dist docs/output/build/html
  rules: &release-rules
    - if: $CI_PIPELINE_SOURCE != "push"
      when: never
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+[.][0-9]+[.][0-9]+$/
      when: on_success

galaxy-release:
  stage: release
  dependencies:
    - devct-build
    - galaxy-build
  script:
    - |-
      if [[ "${CI_COMMIT_TAG}" != "v${GALAXY_VERSION}" ]]; then
        echo "Unexpected version mismatch between Git tag and Galaxy metadata!" >&2
        echo "> Git Tag: ${GITHUB_REF_NAME}" >&2
        echo "> Galaxy Metadata: v${GALAXY_VERSION}" >&2
        echo "Please ensure galaxy.yml has same version as Git tag and try again." >&2
        exit 1
      fi
    - ansible-galaxy collection publish
      --token "${GALAXY_API_KEY}"
      "netcloud-ncae-${GALAXY_VERSION}.tar.gz"
  rules: *release-rules
