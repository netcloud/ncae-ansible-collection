# -*- coding: utf-8 -*-
# Copyright (c) 2023 Netcloud AG
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

from __future__ import absolute_import, division, print_function

__metaclass__ = type

DOCUMENTATION = r"""
    module: core_automation_service
    author: Netcloud AG (@netcloud)
    short_description: Manage automation.Service objects
    description:
        - This module is a CRUD wrapper for NCAE Core around C(/api/automation/v1/service).
        - The C(automation.Service) endpoint is related to NCAE services.
        - The API calls are always made from the Ansible controller as part of an action plugin.
    options:
        name:
            description:
                - Name for Service object, used as unique identifier
            type: str
            required: true
        description:
            description:
                - Human-friendly description what this service does.
            type: str
            required: true
        fire_and_forget:
            description:
                - Specifies whether the service uses fire-and-forget.
                - If C(true), the service is considered as fire-and-forget and has no persistence.
                - If C(false), the service is considered persistent and has an associated lifecycle.
            type: bool
            default: false
        excel:
            description:
                - Specifies whether Excel-based imports are allowed.
            type: bool
            default: false
        devices:
            description:
                - List of device IDs statically associated with this service.
                - If specified, all instances are automatically tied to the given device(s).
                - If left empty, the instance either has no devices at all or uses dynamic targeting.
            type: list
            elements: int
            default: []
        template:
            description:
                - Dictionary containing a service template from NCAE Core.
                - While this can be manually built, it is recommended to use a template generated by NCAE Core.
                - To do so, create in the NCAE service catalog, then use the template data for this parameter.
                - This should always contain a top-level key C(values).
            type: dict
            required: true
        module_name:
            description:
                - Name of module instance on NCAE Core.
                - Acts as an unique identifier and must already exist.
            type: str
            required: true
    extends_documentation_fragment:
        - netcloud.ncae.auth
"""

EXAMPLES = r"""
# Create or update NCAE service
- netcloud.ncae.core_automation_service:
    name: MY-COOL-SERVICE-V1
    description: Cool service doing cool things
    module_name: COOL-Module
    template:
      values:
        - label: Service Instance Name
          name: name
          required: true
          type: text
        - label: Service Instance Targets
          name: __targets__
          type: service_instance_target
          # ... abbreviated ...
"""

RETURN = r"""
id:
    description: ID of managed object
    returned: success
    type: int
data:
    description: Raw API data as returned by NCAE Core
    returned: success
    type: dict
"""
